/* tslint:disable */
/* eslint-disable */
/**
 * RADON CTT Server API
 * This is API of the RADON Continuous Testing Tool (CTT) Server: <a href=\"https://github.com/radon-h2020/radon-ctt\">https://github.com/radon-h2020/radon-ctt<a/>
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Execution } from '../models';
import { POSTExecution } from '../models';
/**
 * ExecutionApi - axios parameter creator
 * @export
 */
export const ExecutionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates an execution
         * @param {POSTExecution} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExecution: async (body?: POSTExecution, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/execution`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the execution with the given UUID and all elements depending on it
         * @summary Delete an execution
         * @param {string} executionUuid UUID of the execution to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExecutionByUuid: async (executionUuid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'executionUuid' is not null or undefined
            if (executionUuid === null || executionUuid === undefined) {
                throw new RequiredError('executionUuid','Required parameter executionUuid was null or undefined when calling deleteExecutionByUuid.');
            }
            const localVarPath = `/execution/{execution_uuid}`
                .replace(`{${"execution_uuid"}}`, encodeURIComponent(String(executionUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an execution
         * @param {string} executionUuid UUID of the execution to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecutionByUuid: async (executionUuid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'executionUuid' is not null or undefined
            if (executionUuid === null || executionUuid === undefined) {
                throw new RequiredError('executionUuid','Required parameter executionUuid was null or undefined when calling getExecutionByUuid.');
            }
            const localVarPath = `/execution/{execution_uuid}`
                .replace(`{${"execution_uuid"}}`, encodeURIComponent(String(executionUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all executions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecutions: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/execution`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExecutionApi - functional programming interface
 * @export
 */
export const ExecutionApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates an execution
         * @param {POSTExecution} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createExecution(body?: POSTExecution, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ExecutionApiAxiosParamCreator(configuration).createExecution(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes the execution with the given UUID and all elements depending on it
         * @summary Delete an execution
         * @param {string} executionUuid UUID of the execution to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExecutionByUuid(executionUuid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Execution>> {
            const localVarAxiosArgs = await ExecutionApiAxiosParamCreator(configuration).deleteExecutionByUuid(executionUuid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieve an execution
         * @param {string} executionUuid UUID of the execution to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExecutionByUuid(executionUuid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Execution>> {
            const localVarAxiosArgs = await ExecutionApiAxiosParamCreator(configuration).getExecutionByUuid(executionUuid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all executions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExecutions(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Execution>>> {
            const localVarAxiosArgs = await ExecutionApiAxiosParamCreator(configuration).getExecutions(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ExecutionApi - factory interface
 * @export
 */
export const ExecutionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Creates an execution
         * @param {POSTExecution} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExecution(body?: POSTExecution, options?: any): AxiosPromise<void> {
            return ExecutionApiFp(configuration).createExecution(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the execution with the given UUID and all elements depending on it
         * @summary Delete an execution
         * @param {string} executionUuid UUID of the execution to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExecutionByUuid(executionUuid: string, options?: any): AxiosPromise<Execution> {
            return ExecutionApiFp(configuration).deleteExecutionByUuid(executionUuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an execution
         * @param {string} executionUuid UUID of the execution to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecutionByUuid(executionUuid: string, options?: any): AxiosPromise<Execution> {
            return ExecutionApiFp(configuration).getExecutionByUuid(executionUuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all executions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecutions(options?: any): AxiosPromise<Array<Execution>> {
            return ExecutionApiFp(configuration).getExecutions(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExecutionApi - object-oriented interface
 * @export
 * @class ExecutionApi
 * @extends {BaseAPI}
 */
export class ExecutionApi extends BaseAPI {
    /**
     * 
     * @summary Creates an execution
     * @param {POSTExecution} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutionApi
     */
    public createExecution(body?: POSTExecution, options?: any) {
        return ExecutionApiFp(this.configuration).createExecution(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes the execution with the given UUID and all elements depending on it
     * @summary Delete an execution
     * @param {string} executionUuid UUID of the execution to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutionApi
     */
    public deleteExecutionByUuid(executionUuid: string, options?: any) {
        return ExecutionApiFp(this.configuration).deleteExecutionByUuid(executionUuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Retrieve an execution
     * @param {string} executionUuid UUID of the execution to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutionApi
     */
    public getExecutionByUuid(executionUuid: string, options?: any) {
        return ExecutionApiFp(this.configuration).getExecutionByUuid(executionUuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all executions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutionApi
     */
    public getExecutions(options?: any) {
        return ExecutionApiFp(this.configuration).getExecutions(options).then((request) => request(this.axios, this.basePath));
    }
}
